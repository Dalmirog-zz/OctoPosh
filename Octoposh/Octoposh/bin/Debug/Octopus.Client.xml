<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Octopus.Client</name>
    </assembly>
    <members>
        <member name="T:Octopus.Client.DefaultLinkResolver">
            <summary>
            In the same way web browsers can follow links like "/api/foo" by knowing the URI of the current page, this class
            allows application
            links to be resolved into fully-qualified URI's. This implementation also supports virtual directories. It assumes
            that the
            API endpoint starts with <c>/api</c>.
            </summary>
        </member>
        <member name="M:Octopus.Client.DefaultLinkResolver.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.DefaultLinkResolver" /> class.
            </summary>
            <param name="root">The root URI of the server.</param>
            <param name="allUrisStartWith">
            A segment that users might or might not include when entering the root URI. If the
            segment exists, it will be ignored.
            </param>
        </member>
        <member name="M:Octopus.Client.DefaultLinkResolver.Resolve(System.String)">
            <summary>
            Resolves the specified link into a fully qualified URI.
            </summary>
            <param name="link">The application relative link (should begin with a <c>/</c>).</param>
            <returns>
            The fully resolved URI.
            </returns>
        </member>
        <member name="M:Octopus.Client.DefaultLinkResolver.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the root URI that URI's are resolved from.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Octopus.Client.IHttpOctopusClient">
            <summary>
            Implemented by an <see cref="T:Octopus.Client.IOctopusClient" /> that uses HTTP to communicate.
            </summary>
        </member>
        <member name="E:Octopus.Client.IHttpOctopusClient.BeforeSendingHttpRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="T:Octopus.Client.ILinkResolver">
            <summary>
            In the same way web browsers can follow links like "/foo" by knowing the URI of the current page, this class allows
            application
            links to be resolved into fully-qualified URI's.
            </summary>
        </member>
        <member name="M:Octopus.Client.ILinkResolver.Resolve(System.String)">
            <summary>
            Resolves the specified link into a fully qualified URI.
            </summary>
            <param name="link">The application relative link (should begin with a <c>/</c>).</param>
            <returns>
            The fully resolved URI.
            </returns>
        </member>
        <member name="T:Octopus.Client.IOctopusAsyncClient">
            <summary>
            Contract for a client to the Octopus Deploy HTTP API.
            </summary>
        </member>
        <member name="P:Octopus.Client.IOctopusAsyncClient.RootDocument">
            <summary>
            Gets a document that identifies the Octopus server (from /api) and provides links to the resources available on the
            server. Instead of hardcoding paths,
            clients should use these link properties to traverse the resources on the server. This document is lazily loaded so
            that it is only requested once for
            the current <see cref="T:Octopus.Client.IOctopusAsyncClient" />.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
        </member>
        <member name="E:Octopus.Client.IOctopusAsyncClient.SendingOctopusRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="E:Octopus.Client.IOctopusAsyncClient.ReceivedOctopusResponse">
            <summary>
            Occurs when a response is received from the Octopus server.
            </summary>
        </member>
        <member name="E:Octopus.Client.IOctopusAsyncClient.BeforeSendingHttpRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="P:Octopus.Client.IOctopusAsyncClient.Repository">
            <summary>
            A simplified interface to commonly-used parts of the API.
            </summary>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.List``1(System.String,System.Object)">
            <summary>
            Fetches a collection of resources from the server using the HTTP GET verb. The collection itself will usually be
            limited in size (pagination) and links to the next page of data is available in the <see cref="P:Octopus.Client.Model.Resource.Links" />
            property.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>The collection of resources from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.Paginate``1(System.String,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="getNextPage">
            A callback invoked for each page of data found. If the callback returns <c>true</c>, the next
            page will also be requested.
            </param>
            <returns>The collection of resources from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.Paginate``1(System.String,System.Object,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <param name="getNextPage">
            A callback invoked for each page of data found. If the callback returns <c>true</c>, the next
            page will also be requested.
            </param>
            <returns>The collection of resources from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.Get``1(System.String,System.Object)">
            <summary>
            Fetches a single resource from the server using the HTTP GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resource.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>The resource from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.Create``1(System.String,``0,System.Object)">
            <summary>
            Creates a resource at the given URI on the server using the POST verb, then performs a fresh GET request to fetch
            the created item.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>The latest copy of the resource from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.Post``1(System.String,``0,System.Object)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.Post``2(System.String,``0,System.Object)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb, and retrieve the response.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.Post(System.String)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.Put``1(System.String,``0)">
            <summary>
            Sends a command to a resource at the given URI on the server using the PUT verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.Update``1(System.String,``0,System.Object)">
            <summary>
            Updates the resource at the given URI on the server using the PUT verb, then performs a fresh GET request to reload
            the data.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the resource to update.</param>
            <param name="resource">The resource to update.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>The latest copy of the resource from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.Delete(System.String,System.Object)">
            <summary>
            Deletes the resource at the given URI from the server using a the DELETE verb. Deletes in Octopus happen
            asynchronously via a background task
            that is executed by the Octopus server. The payload returned by delete will be the task that was created on the
            server.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the resource to delete.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>A task resource that provides details about the background task that deletes the specified resource.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.GetContent(System.String)">
            <summary>
            Fetches raw content from the resource at the specified path, using the GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the resource to fetch.</param>
            <returns>A stream containing the content of the resource.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.PutContent(System.String,System.IO.Stream)">
            <summary>
            Creates or updates the raw content of the resource at the specified path, using the PUT verb.
            </summary>
            <param name="path">The path to the resource to create or update.</param>
            <param name="contentStream">A stream containing content of the resource.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusAsyncClient.RefreshRootDocument">
            <summary>
            Requests a fresh root document from the Octopus Server which can be useful if the API surface has changed. This can occur when enabling/disabling features, or changing license.
            </summary>
            <returns>A fresh copy of the root document.</returns>
        </member>
        <member name="T:Octopus.Client.IOctopusAsyncRepository">
            <summary>
            A simplified interface to commonly-used parts of the API.
            Functionality not exposed by this interface can be accessed
            using <see cref="P:Octopus.Client.IOctopusAsyncRepository.Client" />.
            </summary>
        </member>
        <member name="P:Octopus.Client.IOctopusAsyncRepository.Client">
            <summary>
            The client over which the repository is run.
            </summary>
        </member>
        <member name="T:Octopus.Client.IOctopusClient">
            <summary>
            Contract for a client to the Octopus Deploy HTTP API.
            </summary>
        </member>
        <member name="P:Octopus.Client.IOctopusClient.RootDocument">
            <summary>
            Gets a document that identifies the Octopus server (from /api) and provides links to the resources available on the
            server. Instead of hardcoding paths,
            clients should use these link properties to traverse the resources on the server. This document is lazily loaded so
            that it is only requested once for
            the current <see cref="T:Octopus.Client.IOctopusClient" />.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
        </member>
        <member name="E:Octopus.Client.IOctopusClient.SendingOctopusRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="E:Octopus.Client.IOctopusClient.ReceivedOctopusResponse">
            <summary>
            Occurs when a response is received from the Octopus server.
            </summary>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.List``1(System.String,System.Object)">
            <summary>
            Fetches a collection of resources from the server using the HTTP GET verb. The collection itself will usually be
            limited in size (pagination) and links to the next page of data is available in the <see cref="P:Octopus.Client.Model.Resource.Links" />
            property.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>The collection of resources from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Paginate``1(System.String,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="getNextPage">
            A callback invoked for each page of data found. If the callback returns <c>true</c>, the next
            page will also be requested.
            </param>
            <returns>The collection of resources from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Paginate``1(System.String,System.Object,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <param name="getNextPage">
            A callback invoked for each page of data found. If the callback returns <c>true</c>, the next
            page will also be requested.
            </param>
            <returns>The collection of resources from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Get``1(System.String,System.Object)">
            <summary>
            Fetches a single resource from the server using the HTTP GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path from which to fetch the resource.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>The resource from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Create``1(System.String,``0,System.Object)">
            <summary>
            Creates a resource at the given URI on the server using the POST verb, then performs a fresh GET request to fetch
            the created item.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>The latest copy of the resource from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Post``1(System.String,``0,System.Object)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Post``2(System.String,``0,System.Object)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb, and retrieve the response.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Post(System.String)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Put``1(System.String,``0)">
            <summary>
            Sends a command to a resource at the given URI on the server using the PUT verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Update``1(System.String,``0,System.Object)">
            <summary>
            Updates the resource at the given URI on the server using the PUT verb, then performs a fresh GET request to reload
            the data.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the resource to update.</param>
            <param name="resource">The resource to update.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>The latest copy of the resource from the server.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.Delete(System.String,System.Object)">
            <summary>
            Deletes the resource at the given URI from the server using a the DELETE verb. Deletes in Octopus happen
            asynchronously via a background task
            that is executed by the Octopus server. The payload returned by delete will be the task that was created on the
            server.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the resource to delete.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>A task resource that provides details about the background task that deletes the specified resource.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.GetContent(System.String)">
            <summary>
            Fetches raw content from the resource at the specified path, using the GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the resource to fetch.</param>
            <returns>A stream containing the content of the resource.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.PutContent(System.String,System.IO.Stream)">
            <summary>
            Creates or updates the raw content of the resource at the specified path, using the PUT verb.
            </summary>
            <param name="path">The path to the resource to create or update.</param>
            <param name="contentStream">A stream containing content of the resource.</param>
        </member>
        <member name="M:Octopus.Client.IOctopusClient.RefreshRootDocument">
            <summary>
            Requests a fresh root document from the Octopus Server which can be useful if the API surface has changed. This can occur when enabling/disabling features, or changing license.
            </summary>
            <returns>A fresh copy of the root document.</returns>
        </member>
        <member name="T:Octopus.Client.IOctopusClientFactory">
            <summary>
            Creates instances of <see cref="T:Octopus.Client.IOctopusAsyncClient" />.
            </summary>
        </member>
        <member name="M:Octopus.Client.IOctopusClientFactory.CreateClient(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Creates an appropriate <see cref="T:Octopus.Client.IOctopusClient" /> for the provided <see cref="T:Octopus.Client.OctopusServerEndpoint" />.
            </summary>
            <param name="serverEndpoint">The endpoint to create a client for.</param>
            <returns>The <see cref="T:Octopus.Client.IOctopusClient" /> instance.</returns>
        </member>
        <member name="M:Octopus.Client.IOctopusClientFactory.CreateAsyncClient(Octopus.Client.OctopusServerEndpoint,Octopus.Client.OctopusClientOptions)">
            <summary>
            Creates an appropriate <see cref="T:Octopus.Client.IOctopusAsyncClient" /> for the provided <see cref="T:Octopus.Client.OctopusServerEndpoint" />.
            </summary>
            <param name="serverEndpoint">The endpoint to create a client for.</param>
            <param name="octopusClientOptions"></param>
            <returns>The <see cref="T:Octopus.Client.IOctopusAsyncClient" /> instance.</returns>
        </member>
        <member name="T:Octopus.Client.IOctopusRepository">
            <summary>
            A simplified interface to commonly-used parts of the API.
            Functionality not exposed by this interface can be accessed
            using <see cref="P:Octopus.Client.IOctopusRepository.Client" />.
            </summary>
        </member>
        <member name="P:Octopus.Client.IOctopusRepository.Client">
            <summary>
            The client over which the repository is run.
            </summary>
        </member>
        <member name="T:Octopus.Client.OctopusAsyncClient">
            <summary>
            The Octopus Deploy RESTful HTTP API client.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.#ctor(Octopus.Client.OctopusServerEndpoint,Octopus.Client.OctopusClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusAsyncClient" /> class.
            </summary>
            <param name="serverEndpoint">The server endpoint.</param>
            <param name="options">The <see cref="T:Octopus.Client.OctopusClientOptions" /> used to configure the behavour of the client, may be null.</param>
        </member>
        <member name="P:Octopus.Client.OctopusAsyncClient.RootDocument">
            <summary>
            Gets a document that identifies the Octopus server (from /api) and provides links to the resources available on the
            server. Instead of hardcoding paths,
            clients should use these link properties to traverse the resources on the server. This document is lazily loaded so
            that it is only requested once for
            the current <see cref="T:Octopus.Client.IOctopusAsyncClient" />.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.RefreshRootDocument">
            <summary>
            Requests a fresh root document from the Octopus Server which can be useful if the API surface has changed. This can occur when enabling/disabling features, or changing license.
            </summary>
            <returns>A fresh copy of the root document.</returns>
        </member>
        <member name="E:Octopus.Client.OctopusAsyncClient.BeforeSendingHttpRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="E:Octopus.Client.OctopusAsyncClient.SendingOctopusRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="E:Octopus.Client.OctopusAsyncClient.ReceivedOctopusResponse">
            <summary>
            Occurs when a response is received from the Octopus server.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Get``1(System.String,System.Object)">
            <summary>
            Fetches a single resource from the server using the HTTP GET verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resource.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>
            The resource from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.List``1(System.String,System.Object)">
            <summary>
            Fetches a collection of resources from the server using the HTTP GET verb. The collection itself will usually be
            limited in size (pagination) and links to the next page of data is available in the <see cref="P:Octopus.Client.Model.Resource.Links" />
            property.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>
            The collection of resources from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Paginate``1(System.String,System.Object,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <param name="getNextPage">
            A callback invoked for each page of data found. If the callback returns <c>true</c>, the next
            page will also be requested.
            </param>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Paginate``1(System.String,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="getNextPage">
            A callback invoked for each page of data found. If the callback returns <c>true</c>, the next
            page will also be requested.
            </param>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Create``1(System.String,``0,System.Object)">
            <summary>
            Creates a resource at the given URI on the server using the POST verb, then performs a fresh GET request to fetch
            the created item.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>
            The latest copy of the resource from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Post``1(System.String,``0,System.Object)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Post``2(System.String,``0,System.Object)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to post.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Post(System.String)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <param name="path">The path to the container resource.</param>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Put``1(System.String,``0)">
            <summary>
            Sends a command to a resource at the given URI on the server using the PUT verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Delete(System.String,System.Object)">
            <summary>
            Deletes the resource at the given URI from the server using a the DELETE verb.
            </summary>
            <param name="path">The path to the resource to delete.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Update``1(System.String,``0,System.Object)">
            <summary>
            Updates the resource at the given URI on the server using the PUT verb, then performs a fresh GET request to reload
            the data.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path to the resource to update.</param>
            <param name="resource">The resource to update.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>
            The latest copy of the resource from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.GetContent(System.String)">
            <summary>
            Fetches raw content from the resource at the specified path, using the GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the resource to fetch.</param>
            <returns>A stream containing the content of the resource.</returns>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.PutContent(System.String,System.IO.Stream)">
            <summary>
            Creates or updates the raw content of the resource at the specified path, using the PUT verb.
            </summary>
            <param name="path">The path to the resource to create or update.</param>
            <param name="contentStream">A stream containing content of the resource.</param>
        </member>
        <member name="M:Octopus.Client.OctopusAsyncClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Octopus.Client.OctopusAsyncRepository">
            <summary>
            A simplified interface to commonly-used parts of the API.
            Functionality not exposed by this interface can be accessed
            using <see cref="P:Octopus.Client.IOctopusAsyncRepository.Client" />.
            </summary>
            <remarks>
            Create using:
            <code>
            using(var client = new OctopusAsyncClient(new OctopusServerEndpoint("http://myoctopus/"))
            {
                var repository = client.CreateRepository();
            }
            </code>
            </remarks>
        </member>
        <member name="T:Octopus.Client.OctopusClient">
            <summary>
            The Octopus Deploy RESTful HTTP API client.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusClient.#ctor(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusClient" /> class.
            </summary>
            <param name="serverEndpoint">The server endpoint.</param>
        </member>
        <member name="P:Octopus.Client.OctopusClient.RootDocument">
            <summary>
            Gets a document that identifies the Octopus server (from /api) and provides links to the resources available on the
            server. Instead of hardcoding paths,
            clients should use these link properties to traverse the resources on the server. This document is lazily loaded so
            that it is only requested once for
            the current <see cref="T:Octopus.Client.IOctopusClient" />.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusClient.RefreshRootDocument">
            <summary>
            Requests a fresh root document from the Octopus Server which can be useful if the API surface has changed. This can occur when enabling/disabling features, or changing license.
            </summary>
            <returns>A fresh copy of the root document.</returns>
        </member>
        <member name="E:Octopus.Client.OctopusClient.BeforeSendingHttpRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="E:Octopus.Client.OctopusClient.SendingOctopusRequest">
            <summary>
            Occurs when a request is about to be sent.
            </summary>
        </member>
        <member name="E:Octopus.Client.OctopusClient.ReceivedOctopusResponse">
            <summary>
            Occurs when a response is received from the Octopus server.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Get``1(System.String,System.Object)">
            <summary>
            Fetches a single resource from the server using the HTTP GET verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resource.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>
            The resource from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusClient.List``1(System.String,System.Object)">
            <summary>
            Fetches a collection of resources from the server using the HTTP GET verb. The collection itself will usually be
            limited in size (pagination) and links to the next page of data is available in the <see cref="P:Octopus.Client.Model.Resource.Links" />
            property.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>
            The collection of resources from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Paginate``1(System.String,System.Object,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <param name="getNextPage">
            A callback invoked for each page of data found. If the callback returns <c>true</c>, the next
            page will also be requested.
            </param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Paginate``1(System.String,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})">
            <summary>
            Fetches a collection of resources from the server one page at a time using the HTTP GET verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path from which to fetch the resources.</param>
            <param name="getNextPage">
            A callback invoked for each page of data found. If the callback returns <c>true</c>, the next
            page will also be requested.
            </param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Create``1(System.String,``0,System.Object)">
            <summary>
            Creates a resource at the given URI on the server using the POST verb, then performs a fresh GET request to fetch
            the created item.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>
            The latest copy of the resource from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Post``1(System.String,``0,System.Object)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Post``2(System.String,``0,System.Object)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <typeparam name="TResource"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to post.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Post(System.String)">
            <summary>
            Sends a command to a resource at the given URI on the server using the POST verb.
            </summary>
            <param name="path">The path to the container resource.</param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Put``1(System.String,``0)">
            <summary>
            Sends a command to a resource at the given URI on the server using the PUT verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the container resource.</param>
            <param name="resource">The resource to create.</param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Delete(System.String,System.Object)">
            <summary>
            Deletes the resource at the given URI from the server using a the DELETE verb.
            </summary>
            <param name="path">The path to the resource to delete.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Update``1(System.String,``0,System.Object)">
            <summary>
            Updates the resource at the given URI on the server using the PUT verb, then performs a fresh GET request to reload
            the data.
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="path">The path to the resource to update.</param>
            <param name="resource">The resource to update.</param>
            <param name="pathParameters">If the <c>path</c> is a URI template, parameters to use for substitution.</param>
            <returns>
            The latest copy of the resource from the server.
            </returns>
        </member>
        <member name="M:Octopus.Client.OctopusClient.GetContent(System.String)">
            <summary>
            Fetches raw content from the resource at the specified path, using the GET verb.
            </summary>
            <exception cref="T:Octopus.Client.Exceptions.OctopusSecurityException">
            HTTP 401 or 403: Thrown when the current user's API key was not valid, their
            account is disabled, or they don't have permission to perform the specified action.
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusServerException">
            If any other error is successfully returned from the server (e.g., a 500
            server error).
            </exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusValidationException">HTTP 400: If there was a problem with the request provided by the user.</exception>
            <exception cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">HTTP 404: If the specified resource does not exist on the server.</exception>
            <param name="path">The path to the resource to fetch.</param>
            <returns>A stream containing the content of the resource.</returns>
        </member>
        <member name="M:Octopus.Client.OctopusClient.PutContent(System.String,System.IO.Stream)">
            <summary>
            Creates or updates the raw content of the resource at the specified path, using the PUT verb.
            </summary>
            <param name="path">The path to the resource to create or update.</param>
            <param name="contentStream">A stream containing content of the resource.</param>
        </member>
        <member name="M:Octopus.Client.OctopusClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Octopus.Client.OctopusClientFactory">
            <summary>
            Creates instances of the <see cref="T:Octopus.Client.IOctopusAsyncClient" />.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusClientFactory.CreateClient(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Creates an instance of the client.
            </summary>
            <param name="serverEndpoint">The server endpoint.</param>
            <returns>The <see cref="T:Octopus.Client.IOctopusClient" /> instance.</returns>
        </member>
        <member name="M:Octopus.Client.OctopusClientFactory.CreateAsyncClient(Octopus.Client.OctopusServerEndpoint,Octopus.Client.OctopusClientOptions)">
            <summary>
            Creates an instance of the client.
            </summary>
            <param name="serverEndpoint">The server endpoint.</param>
            <param name="octopusClientOptions"></param>
            <returns>The <see cref="T:Octopus.Client.IOctopusAsyncClient" /> instance.</returns>
        </member>
        <member name="T:Octopus.Client.OctopusClientOptions">
            <summary>
            Options used to change the behaviour of <see cref="T:Octopus.Client.OctopusAsyncClient" />
            </summary>
        </member>
        <member name="T:Octopus.Client.OctopusRepository">
            <summary>
            A simplified interface to commonly-used parts of the API.
            Functionality not exposed by this interface can be accessed
            using <see cref="P:Octopus.Client.IOctopusRepository.Client" />.
            </summary>
            <remarks>
            Create using:
            <code>
            var repository = new OctopusRepository(new OctopusServerEndpoint("http://myoctopus/"));
            </code>
            </remarks>
        </member>
        <member name="T:Octopus.Client.OctopusRequest">
            <summary>
            Describes a request made to the Octopus server by the client.
            </summary>
        </member>
        <member name="T:Octopus.Client.OctopusResponse`1">
            <summary>
            Describes a response from the Octopus server.
            </summary>
            <typeparam name="TResponseResource">The resource type associated with the response.</typeparam>
        </member>
        <member name="T:Octopus.Client.OctopusResponse">
            <summary>
            Describes a response from the Octopus server.
            </summary>
        </member>
        <member name="T:Octopus.Client.OctopusServerEndpoint">
            <summary>
            Specifies the location and credentials to use when communicating with an Octopus Deploy server.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusServerEndpoint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusServerEndpoint" /> class. Since no API key is provided, only
            very limited functionality will be available.
            </summary>
            <param name="octopusServerAddress">
            The URI of the Octopus Server. Ideally this should end with <c>/api</c>. If it ends with any other segment, the
            client
            will assume Octopus runs under a virtual directory.
            </param>
        </member>
        <member name="M:Octopus.Client.OctopusServerEndpoint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusServerEndpoint" /> class.
            </summary>
            <param name="octopusServerAddress">
            The URI of the Octopus Server. Ideally this should end with <c>/api</c>. If it ends with any other segment, the
            client
            will assume Octopus runs under a virtual directory.
            </param>
            <param name="apiKey">
            The API key to use when connecting to the Octopus server. For more information on API keys, please
            see the API documentation on authentication
            (https://github.com/OctopusDeploy/OctopusDeploy-Api/blob/master/sections/authentication.md).
            </param>
        </member>
        <member name="M:Octopus.Client.OctopusServerEndpoint.#ctor(System.String,System.String,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusServerEndpoint" /> class.
            </summary>
            <param name="octopusServerAddress">
            The URI of the Octopus Server. Ideally this should end with <c>/api</c>. If it ends with any other segment, the
            client
            will assume Octopus runs under a virtual directory.
            </param>
            <param name="apiKey">
            The API key to use when connecting to the Octopus server. For more information on API keys, please
            see the API documentation on authentication
            (https://github.com/OctopusDeploy/OctopusDeploy-Api/blob/master/sections/authentication.md).
            </param>
            <param name="credentials">
            Additional credentials to use when communicating to servers that require integrated/basic
            authentication.
            </param>
        </member>
        <member name="M:Octopus.Client.OctopusServerEndpoint.#ctor(Octopus.Client.ILinkResolver,System.String,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.OctopusServerEndpoint" /> class.
            </summary>
            <param name="octopusServer">The resolver that should be used to turn relative links into full URIs.</param>
            <param name="apiKey">
            The API key to use when connecting to the Octopus server. For more information on API keys, please
            see the API documentation on authentication
            (https://github.com/OctopusDeploy/OctopusDeploy-Api/blob/master/sections/authentication.md).
            </param>
            <param name="credentials">
            Additional credentials to use when communicating to servers that require integrated/basic
            authentication.
            </param>
        </member>
        <member name="P:Octopus.Client.OctopusServerEndpoint.OctopusServer">
            <summary>
            The URI of the Octopus Server. Ideally this should end with <c>/api</c>. If it ends with any other segment, the
            client  will assume Octopus runs under a virtual directory.
            </summary>
        </member>
        <member name="P:Octopus.Client.OctopusServerEndpoint.ApiKey">
            <summary>
            Gets the API key to use when connecting to the Octopus server. For more information on API keys, please see the API
            documentation on authentication
            (https://github.com/OctopusDeploy/OctopusDeploy-Api/blob/master/sections/authentication.md).
            </summary>
        </member>
        <member name="P:Octopus.Client.OctopusServerEndpoint.Credentials">
            <summary>
            Gets the additional credentials to use when communicating to servers that require integrated/basic authentication.
            </summary>
        </member>
        <member name="M:Octopus.Client.OctopusServerEndpoint.AsUser(System.String)">
            <summary>
            Recreates the endpoint using the API key of a new user.
            </summary>
            <param name="newUserApiKey">The new user API key.</param>
            <returns>An endpoint with a new user.</returns>
        </member>
        <member name="P:Octopus.Client.OctopusServerEndpoint.Proxy">
            <summary>
            A proxy that should be used to connect to the endpoint.
            </summary>
        </member>
        <member name="T:Octopus.Client.UrlTemplate">
            <summary>
            Modified implementation of the URI Template Spec RFC6570 for use in the Octopus Deploy RESTful API client.
            </summary>
            <remarks>
            This implementation is from: https://github.com/darrelmiller/UriTemplates. The class was renamed so as not to
            conflict with
            the UriTemplate class built into .NET, and the static
            <see
                cref="M:Octopus.Client.UrlTemplate.Resolve(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})" />
            methods were added.
            </remarks>
        </member>
        <member name="M:Octopus.Client.UrlTemplate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.UrlTemplate" /> class.
            </summary>
            <param name="template"> The template. </param>
        </member>
        <member name="M:Octopus.Client.UrlTemplate.SetParameter(System.String,System.Object)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Octopus.Client.UrlTemplate.SetParameter(System.String,System.String)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Octopus.Client.UrlTemplate.SetParameter(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the parameter.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Octopus.Client.UrlTemplate.SetParameter(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the parameter.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Octopus.Client.UrlTemplate.GetParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Octopus.Client.UrlTemplate.Resolve">
            <summary>
            Resolves this instance.
            </summary>
            <returns> </returns>
            <exception cref="T:System.ArgumentException">
            Malformed template :  + result
            or
            Malformed template :  + result
            </exception>
        </member>
        <member name="M:Octopus.Client.UrlTemplate.Resolve(System.String,System.Object)">
            <summary>
            Resolves the specified template spec.
            </summary>
            <param name="templateSpec"> The template spec. </param>
            <param name="parameters"> The parameters. </param>
            <returns> </returns>
        </member>
        <member name="M:Octopus.Client.UrlTemplate.Resolve(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves the specified template spec.
            </summary>
            <param name="templateSpec"> The template spec. </param>
            <param name="parameters"> The parameters. </param>
            <returns> </returns>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusException">
            <summary>
            Base class for all exceptions thrown by the Octopus client.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusException" /> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusException" /> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusException.HttpStatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusException.HelpText">
            <summary>
            Gets additional help that the server may have provided regarding the error.
            </summary>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusExceptionFactory">
            <summary>
            Factory for mapping HTTP errors into Octopus exceptions.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusExceptionFactory.CreateException(System.Net.WebException,System.Net.HttpWebResponse)">
            <summary>
            Creates the appropriate <see cref="T:Octopus.Client.Exceptions.OctopusException" /> from a HTTP response.
            </summary>
            <param name="webException">The web exception.</param>
            <param name="response">The response.</param>
            <returns>A rich exception describing the problem.</returns>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusExceptionFactory.CreateException(System.Net.Http.HttpResponseMessage)">
            <summary>
            Creates the appropriate <see cref="T:Octopus.Client.Exceptions.OctopusException" /> from a HTTP response.
            </summary>
            <param name="response">The response.</param>
            <returns>A rich exception describing the problem.</returns>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusExceptionFactory.OctopusErrorsContract">
            <summary>
            Error contract for error responses.
            </summary>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusExceptionFactory.OctopusErrorsContract.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusExceptionFactory.OctopusErrorsContract.FullException">
            <summary>
            Gets or sets the full exception.
            </summary>
            <value>
            The full exception if available, or null.
            </value>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusExceptionFactory.OctopusErrorsContract.Errors">
            <summary>
            Gets or sets the errors.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusExceptionFactory.OctopusErrorsContract.HelpText">
            <summary>
            Gets or sets additional help regarding the error.
            </summary>
            <value>The help text, or null.</value>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusMethodNotAllowedFoundException">
            <summary>
            An exception thrown when the Octopus Server responds with HTTP 405, which indicates that the
            HTTP method (GET, POST, PUT, DELETE) is not supported on the specified resource.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusMethodNotAllowedFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException">
            <summary>
            An exception thrown when the Octopus Server responds with HTTP 404, such as when the specified
            resource does not exist on the server.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusResourceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusResourceNotFoundException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusSecurityException">
            <summary>
            An exception thrown when the Octopus Server responds with HTTP 401 or 403, indicating that the current
            user's API key was not valid, their account is disabled, or they don't have permission to perform the
            specified action.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusSecurityException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusSecurityException" /> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusServerException">
            <summary>
            An exception thrown when the Octopus Server responds with HTTP 500 or any other error, indicating that there was a
            problem processing
            the request.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusServerException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusServerException" /> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Octopus.Client.Exceptions.OctopusValidationException">
            <summary>
            An exception thrown when there was a problem with the request (usually a HTTP 400). 
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusValidationException.#ctor(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusValidationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:Octopus.Client.Exceptions.OctopusValidationException.#ctor(System.Int32,System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.OctopusValidationException" /> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusValidationException.ErrorMessage">
            <summary>
            Gets the error message that was returned by the Octopus Server.
            </summary>
        </member>
        <member name="P:Octopus.Client.Exceptions.OctopusValidationException.Errors">
            <summary>
            Gets a list of problems with the request that was returned by the Octopus Server.
            </summary>
        </member>
        <member name="T:Octopus.Client.Exceptions.UnsupportedApiVersionException">
            <summary>
            An exception thrown when the Octopus Server supports a version of the API that is incompatible with this class
            library.
            </summary>
        </member>
        <member name="M:Octopus.Client.Exceptions.UnsupportedApiVersionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Exceptions.UnsupportedApiVersionException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Octopus.Client.Extensions.LazyExtensions">
            <summary>
            Extension methods for <see cref="T:System.Lazy`1" /> instances.
            </summary>
        </member>
        <member name="M:Octopus.Client.Extensions.LazyExtensions.LoadValue``1(System.Lazy{``0})">
            <summary>
            Forces the Lazy value to be loaded.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="lazy">The lazy instance.</param>
            <returns>The value of the lazy instance.</returns>
        </member>
        <member name="T:Octopus.Client.Model.ArtifactResource">
            <summary>
            Artifacts are files like documents and test results that may be stored
            alongside a release.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ArtifactResource.Filename">
            <summary>
            Gets or sets the filename of the Artifact to create. An example might be
            "Performance Test Results.csv".
            </summary>
            <remarks>The filename should not include path information.</remarks>
        </member>
        <member name="P:Octopus.Client.Model.ArtifactResource.Source">
            <summary>
            Gets or sets a short summary of the source of this attachment. This will typically be the name of a step/machine,
            or
            "Uploaded by [username]" if the attachment was uploaded by a person.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ArtifactResource.RelatedDocumentIds">
            <summary>
            Gets or sets the documents with which this artifact is associated.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ArtifactResource.Created">
            <summary>
            Gets or sets the time at which the artifact was created.
            </summary>
        </member>
        <member name="F:Octopus.Client.Model.CommunicationStyle.TentaclePassive">
            <summary>
            Listening
            </summary>
        </member>
        <member name="F:Octopus.Client.Model.CommunicationStyle.TentacleActive">
            <summary>
            Polling
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.DeploymentResource.SpecificMachineIds">
            <summary>
            A collection of machines in the target environment
            that should be deployed to. If the collection is
            empty, all enabled machines are deployed.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.DeploymentResource.UseGuidedFailure">
            <summary>
            If set to true, the deployment will prompt for manual intervention (Fail/Retry/Ignore) when
            failures are encountered in activities that support it. May be overridden with the
            Octopus.UseGuidedFailure special variable.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.DeploymentResource.QueueTime">
            <summary>
            If set this time will be the used to schedule the deployment to a later time, null is assumed to mean the time will
            be executed immediately.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.DeploymentStepResource.RequiresPackagesToBeAcquired">
            <summary>
            This flag causes packages to be downloaded before the step runs regardless of whether any
            of the actions within the step need packages. If the actions need packages, then the step
            will be scheduled after acquisition regardless of the value of this flag.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.DeploymentTemplateStep.MachineNames">
            <summary>
            Obsoleted as Server 3.4
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.EnvironmentResource">
            <summary>
            Represents an environment. Environments are user-defined and map to real world deployment environments
            such as development, staging, test and production. Projects are deployed to environments.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EnvironmentResource.Name">
            <summary>
            Gets or sets the name of this environment. This should be short, preferably 5-20 characters.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EnvironmentResource.Description">
            <summary>
            Gets or sets a short description of this environment that can be used to explain the purpose of
            the environment to other users. This field may contain markdown.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EnvironmentResource.SortOrder">
            <summary>
            Gets or sets a number indicating the priority of this environment in sort order. Environments with
            a lower sort order will appear in the UI before items with a higher sort order.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EnvironmentResource.UseGuidedFailure">
            <summary>
            If set to true, deployments will prompt for manual intervention (Fail/Retry/Ignore) when
            failures are encountered in activities that support it. May be overridden with the
            Octopus.UseGuidedFailure special variable.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.EventResource">
            <summary>
            Events are automatically created when significant actions take place within Octopus by users. Examples are adding
            environments, modifying projects,
            deploying releases, canceling tasks, and so on. Events can be used to provide an audit trail of what has happened
            in the system. The HTTP API *cannot*
            be used to add, modify or delete events.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.RelatedDocumentIds">
            <summary>
            Gets or sets a collection of document ID's that this event relates to. Note that the document ID's may no longer
            exist.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Category">
            <summary>
            Gets or sets the event category.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.UserId">
            <summary>
            Gets or sets the ID of the user who created the event.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Username">
            <summary>
            Gets or sets the name of the user who created the event.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.IdentityEstablishedWith">
            <summary>
            Gets or sets a description of how the user performing the event
            identified themselves to Octopus.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Occurred">
            <summary>
            Gets or sets the date/time that the event took place.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Message">
            <summary>
            Gets or sets the message text that summarizes the event.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.MessageHtml">
            <summary>
            Gets or sets the message text that summarizes the event, HTML formatted with links to the related documents.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.MessageReferences">
            <summary>
            Gets or sets an array of document ID's and indexes where they are mentioned in the message text.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Comments">
            <summary>
            Gets or sets any user-provided comments that were recorded with the event.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.EventResource.Details">
            <summary>
            Gets or sets the details of the event. For events representing a modification to a document this will provide a
            HTML-formatted diff of the original and new document.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.FeedResource.#ctor">
            <summary>
            The FeedResource type has been depricated on Octopus Deploy 3.5 servers. Use NuGetFeedResource instead")]
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.IAuditedResource">
            <summary>
            Implemented by resources that are audited.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.IAuditedResource.LastModifiedOn">
            <summary>
            Gets or sets the date/time that this resource was last modified.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.IAuditedResource.LastModifiedBy">
            <summary>
            Gets or sets the username of the user who last modified this resource.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.InterruptionResource">
            <summary>
            An interruption is a request by a process running in the Octopus server for
            user action or input.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.Title">
            <summary>
            Gets or sets a title for this interruption.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.Created">
            <summary>
            Gets the time at which the interruption was created.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.IsPending">
            <summary>
            True if the interruption is waiting for user action; otherwise, false.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.Form">
            <summary>
            Gets the form requesting user input.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.RelatedDocumentIds">
            <summary>
            Gets the ids of documents related to this interruption.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.ResponsibleTeamIds">
            <summary>
            Gets the ids of groups that can take responsibility for this interruption.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.ResponsibleUserId">
            <summary>
            Gets or sets the
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.CanTakeResponsibility">
            <summary>
            Gets or sets a value indicating whether the current user has permissions to take responsibility for this
            interruption.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.HasResponsibility">
            <summary>
            Gets or sets a value indicating whether the current user has responsibility for this interruption.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.TaskId">
            <summary>
            Gets or sets the id of the Server Task raising the interruption.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.InterruptionResource.CorrelationId">
            <summary>
            Gets or sets the correlation ID of the activity in which the interruption was requested,
            if any.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.IResource">
            <summary>
            Implemented by all resources.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.IResource.Id">
            <summary>
            Gets a unique identifier for this resource.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.IResource.Links">
            <summary>
            Gets or sets a dictionary of links to other related resources. These links can be used to navigate the resources on
            the server.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.LibraryVariableSetResource">
            <summary>
            A standalone variable set that can be included in projects where required.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LibraryVariableSetResource.Name">
            <summary>
            Gets or sets the name of this variable set. This should be short, preferably 5-20 characters.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LibraryVariableSetResource.Description">
            <summary>
            Gets or sets a description of this variable set that explains the purpose of
            the variable set to other users. This field may contain markdown.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LibraryVariableSetResource.VariableSetId">
            <summary>
            Gets or sets the id of the associated variable set.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LibraryVariableSetResource.ContentType">
            <summary>
            Describes the purpose of the variable set. Clients can use this to offer an editing experience
            appropriately.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LibraryVariableSetResource.Templates">
            <summary>
            Gets the variable templates.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.LoginCommand">
            <summary>
            A command resource used for logging in.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LoginCommand.Username">
            <summary>
            The username to log in with.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LoginCommand.Password">
            <summary>
            The password to log in with.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.LoginCommand.RememberMe">
            <summary>
            Whether the cookie should be persistent.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.MachineModelStatus">
            <summary>
            Obsoleted as Server 3.4
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.MachineResource.Thumbprint">
            <summary>
            Obsoleted as Server 3.4
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.MachineResource.Uri">
            <summary>
            Obsoleted as Server 3.4
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.MachineResource.Status">
            <summary>
            Obsoleted as Server 3.4
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.NotDocumentReferenceAttribute">
            <summary>
            By default, writeable properties with names ending in 'Id' are considered to be document references and are verified.
            This attribute allows this behaviour to be disabled. 
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.NotReadableAttribute">
            <summary>
            Properties with this attribute can be set from API clients, but the value won't exist for resources returned from
            the server. Commonly used for fields like passwords or API
            keys that allow a value to be written, but not read.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Permission">
            <summary>
            Permissions are restricted via roles; a role may be restricted in a way that some of the
            included permissions are not. So, when permission sets are loaded we only set up restrictions
            that are supported by the permission type.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.ProjectGroupResource">
            <summary>
            Project groups are used to organize collections of related projects. For example, a customer may have a project
            group named
            "Corporate Website" containing three seperate projects. Project groups affect retention policies and permissions.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ProjectGroupResource.Name">
            <summary>
            Gets or sets the name of this project group.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ProjectGroupResource.EnvironmentIds">
            <summary>
            Gets or sets a collection of environment ID's. If this collection is empty, projects in this group can be deployed
            to any environment. If the collection is non-empty, then projects in the group are limited to only deploying to the
            environments listed in this collection.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ProjectGroupResource.RetentionPolicyId">
            <summary>
            Gets or sets the ID of the retention policy that will apply to projects in this group.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.ProjectResource">
            <summary>
            Represents a project.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ProjectResource.IncludedLibraryVariableSetIds">
            <summary>
            Library variable sets included in the project. Sets are listed in order
            of precedence, with earlier items in the list overriding any variables
            with the same name and scope definition appearing later in the list.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.PropertyValueResource">
            <summary>
            Property-values can be sensitive or non-sensitive.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.ReferenceCollection">
            <summary>
            A case-insensitive collection of unique strings used for holding document ID's.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ReleaseResource.LibraryVariableSetSnapshotIds">
            <summary>
            Snapshots of the project's included library variable sets. The
            snapshots are <see cref="T:Octopus.Client.Model.VariableSetResource" />s, not <see cref="T:Octopus.Client.Model.LibraryVariableSetResource" />s.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.ReleaseTemplatePackage.IsResolvable">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Octopus.Client.Model.ReleaseTemplatePackage.PackageId" /> or <see cref="P:Octopus.Client.Model.ReleaseTemplatePackage.FeedId" /> contain no
            references to other variables. Variables can be used to
            select different NuGet feeds or packages at deployment time, however, this means that it's not possible to resolve
            which feed/package to search when creating a release.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Resource">
            <summary>
            Base class for all resources.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Model.Resource" /> class.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Resource.Id">
            <summary>
            Gets or sets a unique identifier for this resource.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Resource.LastModifiedOn">
            <summary>
            Gets or sets the date/time that this resource was last modified.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Resource.LastModifiedBy">
            <summary>
            Gets or sets the username of the user who last modified this resource.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Resource.Links">
            <summary>
            Gets or sets a dictionary of links to other related resources. These links can be used to navigate the resources on
            the server.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Resource.HasLink(System.String)">
            <summary>
            Determines whether the specified link exists.
            </summary>
            <param name="name">The name/key of the link.</param>
            <returns>
            <c>true</c> if the specified link is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Octopus.Client.Model.Resource.Link(System.String)">
            <summary>
            Gets the link with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.Exception">If the link is not defined.</exception>
        </member>
        <member name="T:Octopus.Client.Model.SensitiveValue">
            <summary>
            When reading from the API, only <see cref="P:Octopus.Client.Model.SensitiveValue.HasValue" /> will be set, depending on
            whether a server-side value exists. When writing to the API, passing any non-null
            <see cref="P:Octopus.Client.Model.SensitiveValue.NewValue" /> will set the value; otherwise, leaving <see cref="P:Octopus.Client.Model.SensitiveValue.HasValue" />
            with the status quo value will cause the server-side value to be unchanged, while
            setting <see cref="P:Octopus.Client.Model.SensitiveValue.HasValue" /> to false will clear any value.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TagResource.Name">
            <summary>
            Gets or sets the name of this tag.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TagResource.Description">
            <summary>
            Gets or sets the description of this tag.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TagResource.Color">
            <summary>
            Gets or sets the color of this tag.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TagResource.CanonicalTagName">
            <summary>
            This is the canonical name for the Tag formed as {TagSetName}/{TagName} which is easier to work with than the ID in certain scenarios.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TagSetResource.Name">
            <summary>
            Gets or sets the name of this tag set.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TagSetResource.Description">
            <summary>
            Gets or sets the description of this tag set.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TagSetResource.SortOrder">
            <summary>
            Gets or sets the sort order of this tag set.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TagSetResource.Tags">
            <summary>
            The tags that make up this tag set
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.TaskResource">
            <summary>
            Octopus doesn't just store information; it actively *does* things. Examples include deployments, checking that
            machines are
            online, automated database backups, and more. These "tasks" are queued and executed asynchronously, and their
            progress and logs
            can be monitored using the HTTP API. Some tasks are created automatically; for example, Octopus will automatically
            create a task
            to check the status of all machines every 5 minutes. Some tasks are created implicitly, such as when a deployment
            is created to execute
            the actual deployment. And some tasks can be created manually, such as backup tasks and sending test emails.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.TaskResource.#ctor">
            <summary>
            Create a new <see cref="T:Octopus.Client.Model.TaskResource" />.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.Name">
            <summary>
            Gets or sets the name of the task to create. This name must be one of the list of possible names documented in the
            create API operation documentation.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.Description">
            <summary>
            Gets or sets a short, human-understandable description of this task. An example might be "Manual database backup".
            This is the
            name that will be shown in the task list.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.Arguments">
            <summary>
            Gets or sets any arguments to the task.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.State">
            <summary>
            Gets or sets the current state of the task.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.Completed">
            <summary>
            Gets or sets a value indicating the completion status of the task. May be "Timed out", "Queued...", "Executing...",
            or the time at
            which the task completed for completed tasks.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.QueueTime">
            <summary>
            Gets or sets the time at which the task was queued.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.StartTime">
            <summary>
            Gets or sets the time at which the task started executing.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.LastUpdatedTime">
            <summary>
            Gets or sets the time that the Octopus server last updated the status of this task. For a running task this should
            happen
            at least every couple of minutes.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.CompletedTime">
            <summary>
            Gets or sets the date/time that the task completed. Will be null if the task has not yet completed.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.ServerNode">
            <summary>
            Gets the ID of the Octopus server that created and will control this task.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.Duration">
            <summary>
            Gets or sets a string indicating how long the task took to run.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.ErrorMessage">
            <summary>
            Gets or sets a short summary of the errors encountered when the task ran (if any).
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.HasBeenPickedUpByProcessor">
            <summary>
            Gets or sets a boolean value indicating whether the Octopus Server is processing this task.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.IsCompleted">
            <summary>
            Gets or sets a value indicating whether the task has completed (that is, not queued, not running, and not paused;
            may have finished successfully or failed).
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.FinishedSuccessfully">
            <summary>
            Gets or sets a value indicating whether the task ran to completion successfully.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.HasPendingInterruptions">
            <summary>
            True if the task is waiting for manual intervention.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.CanRerun">
            <summary>
            If true, then the task can be used as the basis for a
            new task with the same effect.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TaskResource.HasWarningsOrErrors">
            <summary>
            True if any warnings or non-fatal errors were recorded in
            the task log during execution.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.TaskState">
            <summary>
            Represents the different states a task goes through.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.TeamResource">
            <summary>
            A group of users that can be assigned to roles in projects and environments.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.Name">
            <summary>
            Gets or sets the name of this team.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.MemberUserIds">
            <summary>
            The users who belong to the team.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.ExternalSecurityGroups">
            <summary>
            The externally-managed security groups (e.g., Active Directory groups) who belong to the team.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.UserRoleIds">
            <summary>
            The roles that the team belongs to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.ProjectIds">
            <summary>
            The projects that the team can exercise its roles in. If empty,
            the team can exercise its roles in all projects.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.EnvironmentIds">
            <summary>
            The environments that the team can exercise its roles in. If empty,
            the team can exercise its roles in all environments.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.TenantIds">
            <summary>
            The tenants that the team can exercise its roles for. If empty,
            the team can exercise its roles for all tenants.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.TenantTags">
            <summary>
            Tags that are evaluated on demand to act as if the tenant was explicitly selected. 
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.CanBeDeleted">
            <summary>
            Gets or sets a flag indicating whether the team can be deleted. The built-in teams
            provided by Octopus generally cannot be deleted.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.CanBeRenamed">
            <summary>
            Gets or sets a flag indicating whether the team can be renamed. The built-in teams
            provided by Octopus generally cannot be renamed.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.CanChangeRoles">
            <summary>
            Gets or sets a flag indicating whether the team's roles can be changed. The built-in Octopus Administrators team
            provided by Octopus cannot have its roles modified; all other teams can.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TeamResource.CanChangeMembers">
            <summary>
            Gets or sets a flag indicating whether the members of this team can be changed. The built-in Everyone team
            provided by Octopus cannot have its members changed, as it will always contain all users.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.TenantResource.TenantTags">
            <summary>
            Tags are referenced by CanonicalName like {TagSetName}/{TagName}
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.UserPermissionRestriction">
            <summary>
            Describes the scope of a permission granted to a user.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.UserPermissionRestriction.RestrictedToProjectIds">
            <summary>
            Restrictions on the projects to which the permission applies,
            if any.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.UserPermissionRestriction.RestrictedToEnvironmentIds">
            <summary>
            Restrictions on the environments to which the permission applies,
            if any.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.UserPermissionRestriction.RestrictedToTenantIds">
            <summary>
            Restrictions on the tenants to which the permission applies,
            if any.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.UserPermissionSetResource">
            <summary>
            Summarizes the permissions assigned to a user via their
            team membership.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.UserPermissionSetResource.Permissions">
            <summary>
            Lists individual permissions granted, including restrictions where
            applicable.
            </summary>
            <remarks>
            Multiple entries may exist for any permission if different
            restrictions are applied. Duplicate or redundant entries may be
            excluded.
            </remarks>
        </member>
        <member name="P:Octopus.Client.Model.UserPermissionSetResource.Teams">
            <summary>
            Gets the teams that the user is a member of.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.UserResource.IsRequestor">
            <summary>
            Gets or sets a value indicating whether this user resource represents the user who requested it.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.UserRoleResource">
            <summary>
            A role played by users.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.VariableSetResource">
            <summary>
            Represents a collection of variables that is attached to a document.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.VariableSetResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Model.VariableSetResource" /> class.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.VariableSetResource.OwnerId">
            <summary>
            Gets or sets the ID of the document that owns these variables.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.VariableSetResource.Version">
            <summary>
            Gets or sets the version number.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.VariableSetResource.Variables">
            <summary>
            Gets the collection of variables.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.VariableSetResource.ScopeValues">
            <summary>
            Gets the scope values that apply to the variables.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.WriteableAttribute">
            <summary>
            Properties with this attribute will be persisted to the server when sent using a POST or PUT request.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.WriteableOnCreateAttribute">
            <summary>
            Properties with this attribute will be persisted to the server when sent using a POST request.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Forms.Button">
            <summary>
            A button is essentially an 'option' that may be associated
            with other form elements. <seealso cref="T:Octopus.Client.Model.Forms.SubmitButtonGroup" />
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Forms.Checkbox">
            <summary>
            A Boolean option.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Forms.Control">
            <summary>
            An visual component of a <see cref="T:Octopus.Client.Model.Forms.Form" />.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Forms.Control.CoerceValue(System.String)">
            <summary>
            Convert a string into the native type supported
            by the control. Only supported if <see cref="M:Octopus.Client.Model.Forms.Control.GetNativeValueType" />
            returns a non-null type.
            </summary>
            <param name="value">The value to coerce. Must not be null or whitespace.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Octopus.Client.Model.Forms.Control.GetNativeValueType">
            <summary>
            Get the native value type supported by the control.
            If the value returned is null, the control does not support values.
            </summary>
            <returns>The native type, or null.</returns>
        </member>
        <member name="T:Octopus.Client.Model.Forms.Form">
            <summary>
            A form is a set of form elements, and the values that apply or may be provided for those elements.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Forms.Form.Values">
            <summary>
            Values supplied for the form elements.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Forms.Form.Elements">
            <summary>
            Elements of the form.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Forms.FormElement">
            <summary>
            An item displayed or retrieved from a <see cref="T:Octopus.Client.Model.Forms.Form" />.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Forms.FormElement.Name">
            <summary>
            The name of the element. Must be unique within the form.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Forms.FormElement.Control">
            <summary>
            A control used to render the element.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Forms.FormElement.IsValueRequired">
            <summary>
            If true, the receiver of the form expects that a value will be
            provided for the element.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Forms.Paragraph">
            <summary>
            A block of instructive text.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Forms.SubmitButtonGroup">
            <summary>
            A group of options, represented as buttons. The value of the element is the
            value of the selected button.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Forms.TextArea">
            <summary>
            An input area for paragraphs of text.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Forms.VariableValue">
            <summary>
            An input area for variable values.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Versioning.IVersionComparer">
            <summary>
            IVersionComparer represents a version comparer capable of sorting and determining the equality of
            SemanticVersion objects.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Versioning.StrictSemanticVersion">
            <summary>
            A strict SemVer implementation
            </summary>
            <summary>
            A base version operations
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(Octopus.Client.Model.Versioning.StrictSemanticVersion)">
            <summary>
            Creates a SemanticVersion from an existing SemanticVersion
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a SemanticVersion X.Y.Z
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabel">Prerelease label</param>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha#build01
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabel">Prerelease label</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha.1.2#build01
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabels">Release labels that have been split by the dot separator</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="P:Octopus.Client.Model.Versioning.StrictSemanticVersion.Major">
            <summary>
            Major version X (X.y.z)
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Versioning.StrictSemanticVersion.Minor">
            <summary>
            Minor version Y (x.Y.z)
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Versioning.StrictSemanticVersion.Patch">
            <summary>
            Patch version Z (x.y.Z)
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Versioning.StrictSemanticVersion.ReleaseLabels">
            <summary>
            A collection of pre-release labels attached to the version.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Versioning.StrictSemanticVersion.Release">
            <summary>
            The full pre-release label for the version.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Versioning.StrictSemanticVersion.IsPrerelease">
            <summary>
            True if pre-release labels exist for the version.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Versioning.StrictSemanticVersion.HasMetadata">
            <summary>
            True if metadata exists for the version.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.Versioning.StrictSemanticVersion.Metadata">
            <summary>
            Build metadata attached to the version.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.ToNormalizedString">
            <summary>
            Gives a normalized representation of the version.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)">
            <summary>
            True if the VersionBase objects are equal based on the given comparison mode.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)">
            <summary>
            Compares NuGetVersion objects using the given comparison mode.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Equality(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)">
            <summary>
            ==
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Inequality(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)">
            <summary>
            !=
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThan(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)">
            <summary>
            >
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)">
            <summary>
            >=
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.Parse(System.String)">
            <summary>
            Parses a SemVer string using strict SemVer rules.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.TryParse(System.String,Octopus.Client.Model.Versioning.StrictSemanticVersion@)">
            <summary>
            Parse a version string
            </summary>
            <returns>false if the version is not a strict semver</returns>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.StrictSemanticVersion.ParseSections(System.String)">
            <summary>
            Parse the version string into version/release/build
            The goal of this code is to take the most direct and optimized path
            to parsing and validating a semver. Regex would be much cleaner, but
            due to the number of versions created in NuGet Regex is too slow.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Versioning.VersionComparer">
            <summary>
            An IVersionComparer for NuGetVersion and NuGetVersion types.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.VersionComparer.#ctor">
            <summary>
            Creates a VersionComparer using the default mode.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.VersionComparer.#ctor(Octopus.Client.Model.Versioning.VersionComparison)">
            <summary>
            Creates a VersionComparer that respects the given comparison mode.
            </summary>
            <param name="versionComparison">comparison mode</param>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.VersionComparer.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)">
            <summary>
            Determines if both versions are equal.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.VersionComparer.Compare(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)">
            <summary>
            Compares the given versions using the VersionComparison mode.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.VersionComparer.GetHashCode(Octopus.Client.Model.Versioning.StrictSemanticVersion)">
            <summary>
            Gives a hash code based on the normalized version string.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.VersionComparer.Compare(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)">
            <summary>
            Compare versions.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.VersionComparer.CompareLegacyVersion(Octopus.Client.Model.SemanticVersion,Octopus.Client.Model.SemanticVersion)">
            <summary>
            Compares the 4th digit of the version number.
            </summary>
        </member>
        <member name="F:Octopus.Client.Model.Versioning.VersionComparer.Default">
            <summary>
            A default comparer that compares metadata as strings.
            </summary>
        </member>
        <member name="F:Octopus.Client.Model.Versioning.VersionComparer.Version">
            <summary>
            A comparer that uses only the version numbers.
            </summary>
        </member>
        <member name="F:Octopus.Client.Model.Versioning.VersionComparer.VersionRelease">
            <summary>
            Compares versions without comparing the metadata.
            </summary>
        </member>
        <member name="F:Octopus.Client.Model.Versioning.VersionComparer.VersionReleaseMetadata">
            <summary>
            A version comparer that follows SemVer 2.0.0 rules.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.VersionComparer.CompareReleaseLabels(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Compares sets of release labels.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.Versioning.VersionComparer.CompareRelease(System.String,System.String)">
            <summary>
            Release labels are compared as numbers if they are numeric, otherwise they will be compared
            as strings.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.Versioning.VersionComparison">
            <summary>
            Version comparison modes.
            </summary>
        </member>
        <member name="F:Octopus.Client.Model.Versioning.VersionComparison.Default">
            <summary>
            By default all components (inc. build metadata) will be used in the compare.
            </summary>
        </member>
        <member name="F:Octopus.Client.Model.Versioning.VersionComparison.Version">
            <summary>
            Compares only the version numbers.
            </summary>
        </member>
        <member name="F:Octopus.Client.Model.Versioning.VersionComparison.VersionRelease">
            <summary>
            Include Version number and Release labels in the compare.
            </summary>
        </member>
        <member name="F:Octopus.Client.Model.Versioning.VersionComparison.VersionReleaseMetadata">
            <summary>
            Include all metadata during the compare.
            </summary>
        </member>
        <member name="T:Octopus.Client.Model.SemanticVersion">
            <summary>
            A hybrid implementation of SemVer that supports semantic versioning as described at http://semver.org while
            not strictly enforcing it to
            allow older 4-digit versioning schemes to continue working.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(System.String)">
            <summary>
            Creates a NuGetVersion using NuGetVersion.Parse(string)
            </summary>
            <param name="version">Version string</param>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(Octopus.Client.Model.SemanticVersion)">
            <summary>
            Creates a NuGetVersion from an existing NuGetVersion
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(System.Version,System.String,System.String)">
            <summary>
            Creates a NuGetVersion from a .NET Version
            </summary>
            <param name="version">Version numbers</param>
            <param name="releaseLabel">Prerelease label</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a NuGetVersion X.Y.Z
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabel">Prerelease label</param>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha#build01
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabel">Prerelease label</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha.1.2#build01
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabels">Prerelease labels</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a NuGetVersion W.X.Y.Z
            </summary>
            <param name="major">W.x.y.z</param>
            <param name="minor">w.X.y.z</param>
            <param name="patch">w.x.Y.z</param>
            <param name="revision">w.x.y.Z</param>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a NuGetVersion W.X.Y.Z-alpha#build01
            </summary>
            <param name="major">W.x.y.z</param>
            <param name="minor">w.X.y.z</param>
            <param name="patch">w.x.Y.z</param>
            <param name="revision">w.x.y.Z</param>
            <param name="releaseLabel">Prerelease label</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a NuGetVersion W.X.Y.Z-alpha.1#build01
            </summary>
            <param name="major">W.x.y.z</param>
            <param name="minor">w.X.y.z</param>
            <param name="patch">w.x.Y.z</param>
            <param name="revision">w.x.y.Z</param>
            <param name="releaseLabels">Prerelease labels</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean)">
            <summary>
            Creates a NuGetVersion from a .NET Version with additional release labels, build metadata, and a
            non-normalized version string.
            </summary>
            <param name="version">Version numbers</param>
            <param name="releaseLabels">prerelease labels</param>
            <param name="metadata">Build metadata</param>
            <param name="originalVersion">Non-normalized original version string</param>
            <param name="preserveMissingComponents">Indicates whether to normalize to semantic version</param>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.ToString">
            <summary>
            Returns the version string.
            </summary>
            <remarks>This method includes legacy behavior. Use ToNormalizedString() instead.</remarks>
        </member>
        <member name="P:Octopus.Client.Model.SemanticVersion.Version">
            <summary>
            A System.Version representation of the version without metadata or release labels.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.SemanticVersion.IsLegacyVersion">
            <summary>
            True if the NuGetVersion is using legacy behavior.
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.SemanticVersion.Revision">
            <summary>
            Revision version R (x.y.z.R)
            </summary>
        </member>
        <member name="P:Octopus.Client.Model.SemanticVersion.IsSemVer2">
            <summary>
            Returns true if version is a SemVer 2.0.0 version
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.Parse(System.String,System.Boolean)">
            <summary>
            Creates a NuGetVersion from a string representing the semantic version.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.TryParse(System.String,Octopus.Client.Model.SemanticVersion@,System.Boolean)">
            <summary>
            Parses a version string using loose semantic versioning rules that allows 2-4 version components followed
            by an optional special version.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.TryParseStrict(System.String,Octopus.Client.Model.SemanticVersion@)">
            <summary>
            Parses a version string using strict SemVer rules.
            </summary>
        </member>
        <member name="M:Octopus.Client.Model.SemanticVersion.GetLegacyString(System.Version,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a legacy version string using System.Version
            </summary>
        </member>
        <member name="T:Octopus.Client.Operations.IRegisterMachineOperation">
            <summary>
            Encapsulates the operation for registering machines.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.EnvironmentNames">
            <summary>
            Gets or sets the environments that this machine should be added to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.Roles">
            <summary>
            Gets or sets the roles that this machine belongs to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.Tenants">
            <summary>
            Gets or sets the tenants that this machine is linked to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.TenantTags">
            <summary>
            Gets or sets the tenant tags that this machine is linked to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.MachineName">
            <summary>
            Gets or sets the name of the machine that will be used within Octopus to identify this machine.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.MachinePolicy">
            <summary>
            Gets or sets the machine policy that applies to this machine.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.TentacleHostname">
            <summary>
            Gets or sets the hostname that Octopus should use when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.TentaclePort">
            <summary>
            Gets or sets the TCP port that Octopus should use when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.TentacleThumbprint">
            <summary>
            Gets or sets the certificate thumbprint that Octopus should expect when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.AllowOverwrite">
            <summary>
            If a machine with the same name already exists, it won't be overwritten by default (instead, an
            <see cref="T:System.ArgumentException" /> will be thrown).
            Set this property to <c>true</c> if you do want the existing machine to be overwritten.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.IRegisterMachineOperation.CommunicationStyle">
            <summary>
            The communication style to use with the Tentacle. Allowed values are: TentacleActive, in which case the
            Tentacle will connect to the Octopus server for instructions; or, TentaclePassive, in which case the
            Tentacle will listen for commands from the server (default).
            </summary>
        </member>
        <member name="M:Octopus.Client.Operations.IRegisterMachineOperation.Execute(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Executes the operation against the specified Octopus Deploy server.
            </summary>
            <param name="serverEndpoint">The Octopus Deploy server endpoint.</param>
        </member>
        <member name="M:Octopus.Client.Operations.IRegisterMachineOperation.Execute(Octopus.Client.OctopusRepository)">
            <summary>
            Executes the operation against the specified Octopus Deploy server.
            </summary>
            <param name="repository">The Octopus Deploy repository.</param>
        </member>
        <member name="M:Octopus.Client.Operations.IRegisterMachineOperation.ExecuteAsync(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Executes the operation against the specified Octopus Deploy server.
            </summary>
            <param name="serverEndpoint">The Octopus Deploy server endpoint.</param>
        </member>
        <member name="M:Octopus.Client.Operations.IRegisterMachineOperation.ExecuteAsync(Octopus.Client.OctopusAsyncRepository)">
            <summary>
            Executes the operation against the specified Octopus Deploy server.
            </summary>
            <param name="repository">The Octopus Deploy repository.</param>
        </member>
        <member name="T:Octopus.Client.Operations.RegisterMachineOperation">
            <summary>
            Encapsulates the operation for registering machines.
            </summary>
        </member>
        <member name="M:Octopus.Client.Operations.RegisterMachineOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Operations.RegisterMachineOperation" /> class.
            </summary>
        </member>
        <member name="M:Octopus.Client.Operations.RegisterMachineOperation.#ctor(Octopus.Client.IOctopusClientFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Operations.RegisterMachineOperation" /> class.
            </summary>
            <param name="clientFactory">The client factory.</param>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.EnvironmentNames">
            <summary>
            Gets or sets the environments that this machine should be added to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.Roles">
            <summary>
            Gets or sets the roles that this machine belongs to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.Tenants">
            <summary>
            Gets or sets the tenants that this machine is linked to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.TenantTags">
            <summary>
            Gets or sets the tenant tags that this machine is linked to.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.MachineName">
            <summary>
            Gets or sets the name of the machine that will be used within Octopus to identify this machine.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.MachinePolicy">
            <summary>
            Get or sets the machine policy that applied to this machine.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.TentacleHostname">
            <summary>
            Gets or sets the hostname that Octopus should use when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.TentaclePort">
            <summary>
            Gets or sets the TCP port that Octopus should use when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.TentacleThumbprint">
            <summary>
            Gets or sets the certificate thumbprint that Octopus should expect when communicating with the Tentacle.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.AllowOverwrite">
            <summary>
            If a machine with the same name already exists, it won't be overwritten by default (instead, an
            <see cref="T:System.ArgumentException" /> will be thrown).
            Set this property to <c>true</c> if you do want the existing machine to be overwritten.
            </summary>
        </member>
        <member name="P:Octopus.Client.Operations.RegisterMachineOperation.CommunicationStyle">
            <summary>
            The communication style to use with the Tentacle. Allowed values are: TentacleActive, in which case the
            Tentacle will connect to the Octopus server for instructions; or, TentaclePassive, in which case the
            Tentacle will listen for commands from the server (default).
            </summary>
        </member>
        <member name="M:Octopus.Client.Operations.RegisterMachineOperation.Execute(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Executes the operation against the specified Octopus Deploy server.
            </summary>
            <param name="serverEndpoint">The Octopus Deploy server endpoint.</param>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Octopus.Client.Operations.RegisterMachineOperation.Execute(Octopus.Client.OctopusRepository)">
            <summary>
            Executes the operation against the specified Octopus Deploy server.
            </summary>
            <param name="repository">The Octopus Deploy server repository.</param>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Octopus.Client.Operations.RegisterMachineOperation.ExecuteAsync(Octopus.Client.OctopusServerEndpoint)">
            <summary>
            Executes the operation against the specified Octopus Deploy server.
            </summary>
            <param name="serverEndpoint">The Octopus Deploy server endpoint.</param>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Octopus.Client.Operations.RegisterMachineOperation.ExecuteAsync(Octopus.Client.OctopusAsyncRepository)">
            <summary>
            Executes the operation against the specified Octopus Deploy server.
            </summary>
            <param name="repository">The Octopus Deploy server repository.</param>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="T:Octopus.Client.Serialization.ControlConverter">
            <summary>
            Serializes <see cref="T:Octopus.Client.Model.Forms.Control" />s by including and reading a custom Type property.
            </summary>
        </member>
        <member name="T:Octopus.Client.Serialization.EndpointConverter">
            <summary>
            Serializes <see cref="T:Octopus.Client.Model.Endpoints.EndpointResource" />s by including and the CommunicationStyle property.
            </summary>
        </member>
        <member name="T:Octopus.Client.Serialization.JsonSerialization">
            <summary>
            Support for reading and writing JSON, exposed for convenience of those using JSON.NET.
            </summary>
        </member>
        <member name="M:Octopus.Client.Serialization.JsonSerialization.GetDefaultSerializerSettings">
            <summary>
            The serializer settings used by Octopus when reading and writing JSON from the
            Octopus Deploy RESTful API.
            </summary>
        </member>
        <member name="T:Octopus.Client.Util.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:Octopus.Client.Util.HashCodeCombiner.GetHashCode(System.Object[])">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="T:Octopus.Client.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:Octopus.Client.Logging.ILog.Log(Octopus.Client.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:Octopus.Client.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:Octopus.Client.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:Octopus.Client.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:Octopus.Client.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:Octopus.Client.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:Octopus.Client.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:Octopus.Client.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:Octopus.Client.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="F:Octopus.Client.Logging.LogProvider.DisableLoggingEnvironmentVariable">
            <summary>
            The disable logging environment variable. If the environment variable is set to 'true', then logging
            will be disabled.
            </summary>
        </member>
        <member name="M:Octopus.Client.Logging.LogProvider.SetCurrentLogProvider(Octopus.Client.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:Octopus.Client.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Octopus.Client.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:Octopus.Client.Logging.LogProvider.SetCurrentLogProvider(Octopus.Client.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:Octopus.Client.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:Octopus.Client.Logging.ILog"/></returns>
        </member>
        <member name="M:Octopus.Client.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:Octopus.Client.Logging.ILog"/></returns>
        </member>
        <member name="M:Octopus.Client.Logging.LogProvider.GetLogger(System.Type)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <returns>An instance of <see cref="T:Octopus.Client.Logging.ILog"/></returns>
        </member>
        <member name="M:Octopus.Client.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:Octopus.Client.Logging.ILog"/></returns>
        </member>
        <member name="M:Octopus.Client.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:Octopus.Client.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:Octopus.Client.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:Octopus.Client.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Octopus.Client.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Octopus.Client.Validation.PasswordComplexityAttribute">
            <summary>
            A custom validation rule that ensures passwords meet complexity requirements.
            </summary>
        </member>
        <member name="M:Octopus.Client.Validation.PasswordComplexityAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Octopus.Client.Validation.PasswordComplexityAttribute" /> class.
            </summary>
        </member>
    </members>
</doc>
